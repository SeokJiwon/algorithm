'''
Inversions
A sub-sequence is a sequence that can be generated by deleting zero or more elements from the original sequence while keeping the order. 
For example, (1,2), (2, 3) and (1, 2, 3) are valid sub-sequences of (1, 2, 3) while (2, 1) is not. 
A sequence is called increasing if all the elements are strictly increasing. 
Formally, (S1, S2, ... , SN-1, SN) is said to be increasing if Si < Si+1 ∀ i ∈ [1, N-1]. 
Given an integer sequence S, your task is to find the length of the longest increasing subsequence of S.
'''
import math
import os
import random
import re
import sys

def maxInversions(arr):
    # Write your code here
    n = len(arr)
    result = 0
    for i in range(0,n-1):
        a = 0
        b = 0
        for j in range(i+1, n):
            if arr[i] > arr[j]:
                a+=1
        for j in range(i-1, -1, -1):
            if arr[j] > arr[i]:
                b+=1
        result += a*b
    return result

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    arr_count = int(input().strip())
    arr = []

    for _ in range(arr_count):
        arr_item = int(input().strip())
        arr.append(arr_item)
    result = maxInversions(arr)

    fptr.write(str(result) + '\n')
    fptr.close()